Name:           Caroline Zhu
UCLA ID:        204163619

Collaborators:  N/A

-------------------------------------------------------------------------------

Response to Exercise 1:

    The name of the scheduling algorithm is: round-robin


(Exercise 2 is a coding exercise):

    Strict priority scheduling is implemented in the schedule() function in 
    schedos-kern.c. It is in the switch statement, case: __EXERCISE_2__.


Response to Exercise 3:

Average turnaround time for scheduling_algorithm 0: 1278.5 ms
    320 * 4 - 3 ms = 1277 ms
    320 * 4 - 2 ms = 1278 ms
    320 * 4 - 1 ms = 1279 ms
    320 * 4 - 0 ms = 1280 ms
    Average: 1278.5 ms

Average turnaround time for scheduling_algorithm 1: 800 ms
    (320 + 640 + 960 + 1280)/4 = 800 ms

Average wait time for scheduling_algorithm 0: 1.5 ms
    (0 + 1 + 2 + 3)/4 = 1.5 ms

Average wait time for scheduling_algorithm 1: 480 ms
    (0 + 320 + 640 + 960)/4 = 480 ms


Exercise 4:

Did you complete Exercise 4A, Exercise 4B, or both for extra credit?

    Yes. Both were implemented in the schedule() function in schedos-kern.c, in
    cases __EXERCISE_4A__ and __EXERCISE_4B__ respectively. Variables were added
    to the process_t struct in schedos-kern.h to store values for use by the
    scheduler. These values can be set by system calls added in schedos-app.h, 
    which call the interrupt handler in schedos-kernel.c


Exercise 5:

    We can see that the timer interrupt during process 4. The round-robin 
    scheduling managed to complete 4 executions before the timer expired, so
    process 4 was unable to print during the fifth round-robin cycle. This
    resulted in:

    1234 1234 1234 1234 123 1234


(Exercise 6 is a coding exercise)

    This was completed by printing the character to the screen with a system 
    call (in schedos-1.c). This guarantees printing is atomic because 
    interrupts are disabled in the kernel. I added code to schedos-kernel.c in
    the interrupt handler, and the system call implemented was sys_print.


Anything else you'd like us to know:

-------------------------------------------------------------------------------

Extra credit exercises:

Exercise 4A and 4B were both completed


Exercise 7 was implemented using a lottery scheduler.

    I implemented interrupts to add and remove tickets, which would be placed 
    in a pid array by a process using a system call. When the lottery scheduler
    is used, I call a random() function (pseudorandom generator) to randomly
    pick a value from that array. The values I chose for the RNG were found on
    the Wikipedia article here:
    https://en.wikipedia.org/wiki/Linear_congruential_generator

    After a ticket is run, it is removed from the ticket array.

    Currently, there is a total of MAX_TICKET_NUMBER of lottery tickets, which is
    currently set to 100. You can test the functionality of my implementation by
    adjusting MAX_TICKET_NUMBER and changing the #define __LOTTERY_X__ constants
    at around line 70 in schedos-kern.c. These numbers can be adjusted such that
    the sum of these constants is <= MAX_TICKET_NUMBER.

